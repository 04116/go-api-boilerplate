# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
# make helm-delete && helm del --purge go-api-boilerplate && kubectl delete customresourcedefinition certificates.certmanager.k8s.io && kubectl delete customresourcedefinition clusterissuers.certmanager.k8s.io && kubectl delete customresourcedefinition issuers.certmanager.k8s.io

ingress:
  enabled: true
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt
    kubernetes.io/ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
    kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/secure-backends: "true"
  class: nginx
  hosts:
    - host: go-api-boilerplate.local
      paths:
        - path: /
          backend:
            serviceName: kubernetes-dashboard
            servicePort: 443
        - path: /localstack
          backend:
            serviceName: go-api-boilerplate-localstack
            servicePort: 4567
        - path: /auth
          backend:
            serviceName: go-api-boilerplate-auth
            servicePort: 3000
        - path: /users
          backend:
            serviceName: go-api-boilerplate-user
            servicePort: 3000
  tls:
    - secretName: go-api-boilerplate-tls
      hosts:
        - go-api-boilerplate.local

kubernetes-dashboard:
  enabled: true
  enableInsecureLogin: true
  fullnameOverride: 'kubernetes-dashboard'

issuer:
  enabled: true
  name: letsencrypt
  kind: ClusterIssuer
  server: https://acme-v02.api.letsencrypt.org/directory
  email: example@gmail.com
  secretName: go-api-boilerplate-tls
  http01: true

certificate:
  enabled: true
  ingressClass: nginx
  secretName: go-api-boilerplate-tls
  issuerKind: ClusterIssuer
  issuerName: letsencrypt
  domains:
    - go-api-boilerplate.local

cert-manager:
  ingressShim:
    defaultIssuerName: letsencrypt
    defaultIssuerKind: ClusterIssuer
  # @TODO: Ucomment after first deploy. For details see: https://github.com/jetstack/cert-manager/issues/870
  # createCustomResource: false

mysql:
  mysqlRootPassword: password
  initializationFiles:
    first-db.sql: |-
      CREATE DATABASE IF NOT EXISTS goapiboilerplate DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;

# AWS localstack https://github.com/localstack/localstack
localstack:
  enabled: false
  nameOverride: localstack
  image:
    repository: localstack/localstack
    tag: 0.8.10
    pullPolicy: IfNotPresent
  service:
    ports:
      - name: dynamodb
        internalPort: 4569
        externalPort: 4569
      - name: ui
        internalPort: 4567
        externalPort: 4567
  env:
    - name: SERVICES
      valueFrom: "dynamodb:4569"
    - name: PORT_WEB_UI
      valueFrom: 4567

auth:
  nameOverride: auth
  image:
    repository: auth
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  envFrom:
    secretRef: go-api-boilerplate-app
  env:
    - name: ENV
      valueFrom:
        configMapKeyRef:
          key: ENV
          name: go-api-boilerplate-app
    - name: ORIGINS
      valueFrom:
        configMapKeyRef:
          key: ORIGINS
          name: go-api-boilerplate-app
    - name: HOST
      valueFrom:
        configMapKeyRef:
          key: HOST
          name: go-api-boilerplate-app
    - name: PORT_HTTP
      valueFrom:
        configMapKeyRef:
          key: PORT_HTTP
          name: go-api-boilerplate-app
    - name: PORT_GRPC
      valueFrom:
        configMapKeyRef:
          key: PORT_GRPC
          name: go-api-boilerplate-app
    - name: USER_HOST
      value: go-api-boilerplate-user
    - name: USER_PORT_GRPC
      valueFrom:
        configMapKeyRef:
          key: PORT_GRPC
          name: go-api-boilerplate-app
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    httpGet:
      path: /readiness
      port: 3000
  liveness:
    initialDelaySeconds: 20
    httpGet:
      path: /healthz
      port: 3000

user:
  nameOverride: user
  image:
    repository: user
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  envFrom:
    secretRef: go-api-boilerplate-app
  env:
    - name: ENV
      valueFrom:
        configMapKeyRef:
          key: ENV
          name: go-api-boilerplate-app
    - name: ORIGINS
      valueFrom:
        configMapKeyRef:
          key: ORIGINS
          name: go-api-boilerplate-app
    - name: HOST
      valueFrom:
        configMapKeyRef:
          key: HOST
          name: go-api-boilerplate-app
    - name: PORT_HTTP
      valueFrom:
        configMapKeyRef:
          key: PORT_HTTP
          name: go-api-boilerplate-app
    - name: PORT_GRPC
      valueFrom:
        configMapKeyRef:
          key: PORT_GRPC
          name: go-api-boilerplate-app
    - name: AWS_REGION
      valueFrom:
        configMapKeyRef:
          key: AWS_REGION
          name: go-api-boilerplate-app
    - name: AWS_ENDPOINT
      valueFrom:
        configMapKeyRef:
          key: AWS_ENDPOINT
          name: go-api-boilerplate-app
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    httpGet:
      path: /readiness
      port: 3000
  liveness:
    initialDelaySeconds: 20
    httpGet:
      path: /healthz
      port: 3000

secret:
  type: Opaque
  data:
    SECRET: changeme

configMap:
  data:
    ENV: development
    ORIGINS: go-api-boilerplate.local|localhost|0.0.0.0|127.0.0.1
    HOST: '0.0.0.0'
    PORT_HTTP: '3000'
    PORT_GRPC: '3001'
    AWS_REGION: 'us-east-1'
    AWS_ENDPOINT: 'http://go-api-boilerplate-localstack:4569'
