ingress:
  enabled: true
  issuerName: letsencrypt
  issuerKind: Issuer
  class: nginx
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: go-api-boilerplate.local
      paths:
        - path: /
          backend:
            serviceName: kubernetes-dashboard
            servicePort: 443
        - path: /localstack
          backend:
            serviceName: go-api-boilerplate-localstack
            servicePort: 4567
        - path: /phpmyadmin
          backend:
            serviceName: go-api-boilerplate-phpmyadmin
            servicePort: 443
        - path: /auth
          backend:
            serviceName: go-api-boilerplate-auth
            servicePort: 3000
        - path: /users
          backend:
            serviceName: go-api-boilerplate-user
            servicePort: 3000
  tls:
    - secretName: go-api-boilerplate-tls
      hosts:
        - go-api-boilerplate.local

issuer:
  enabled: true
  name: letsencrypt
  kind: Issuer
  server: https://acme-v02.api.letsencrypt.org/directory
  email: example@gmail.com
  secretName: go-api-boilerplate-tls
  http01: true

cert-manager:
  ingressShim:
    defaultIssuerName: letsencrypt
    defaultIssuerKind: Issuer

kubernetes-dashboard:
  enableInsecureLogin: true
  fullnameOverride: 'kubernetes-dashboard'
  extraArgs:
    - '--heapster-host=http://heapster.default:8082'

heapster:
  fullnameOverride: 'heapster'

phpmyadmin:
  service:
    port: 443
  db:
    port: 3306
    host: go-api-boilerplate-mysql

mysql:
  existingSecret: go-api-boilerplate-app
  mysqlUser: goapiboilerplate
  initializationFiles:
    privileges.sql: |-
      GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
      GRANT ALL PRIVILEGES ON *.* TO 'user'@'%' WITH GRANT OPTION;
      FLUSH PRIVILEGES;
    base_schema.sql: |-
      CREATE DATABASE IF NOT EXISTS goapiboilerplate DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
      USE goapiboilerplate;
      CREATE TABLE `users` (
        `distinctId`   INT                                    NOT NULL AUTO_INCREMENT,
        `id`           CHAR(36)                               NOT NULL,
        `emailAddress` VARCHAR(255) COLLATE utf8_general_ci   NOT NULL,
        `facebookId`   VARCHAR(255)                                     DEFAULT NULL,
        `googleId`     VARCHAR(255)                                     DEFAULT NULL,
        PRIMARY KEY (`distinctId`),
        UNIQUE KEY `id` (`id`),
        UNIQUE KEY `emailAddress` (`emailAddress`),
        INDEX `i_facebookId` (`facebookId`),
        INDEX `i_googleId` (`googleId`)
      )
        ENGINE = InnoDB
        DEFAULT CHARSET = utf8
        COLLATE = utf8_bin;
      CREATE TABLE `clients` (
        `distinctId` INT          NOT NULL AUTO_INCREMENT,
        `id`         CHAR(36)     NOT NULL,
        `userId`     CHAR(36)     NOT NULL,
        `secret`     VARCHAR(255) NOT NULL,
        `domain`     VARCHAR(255) NOT NULL,
        `data`       JSON         NOT NULL,
        PRIMARY KEY (`distinctId`),
        UNIQUE KEY `id` (`id`),
        INDEX `i_userId` (`userId`)
      )
        ENGINE = InnoDB
        DEFAULT CHARSET = utf8
        COLLATE = utf8_bin;
      CREATE TABLE `auth_tokens` (
        `distinctId` INT          NOT NULL AUTO_INCREMENT,
        `id`         CHAR(36)     NOT NULL,
        `clientId`   CHAR(36)     NOT NULL,
        `userId`     CHAR(36)     NOT NULL,
        `code`       VARCHAR(255) DEFAULT NULL,
        `access`     TEXT         NOT NULL,
        `refresh`    TEXT         NOT NULL,
        `data`       JSON         NOT NULL,
        PRIMARY KEY (`distinctId`),
        UNIQUE KEY `id` (`id`),
        INDEX `i_userId` (`userId`),
        INDEX `i_code` (`code`),
        INDEX `i_access` (`access`),
        INDEX `i_refresh` (`refresh`)
      )
        ENGINE = InnoDB
        DEFAULT CHARSET = utf8
        COLLATE = utf8_bin;

# AWS localstack https://github.com/localstack/localstack
localstack:
  enabled: false
  nameOverride: localstack
  image:
    repository: localstack/localstack
    tag: 0.8.10
    pullPolicy: IfNotPresent
  service:
    ports:
      - name: dynamodb
        internalPort: 4569
        externalPort: 4569
      - name: ui
        internalPort: 4567
        externalPort: 4567
  env:
    - name: SERVICES
      value: "dynamodb:4569"
    - name: PORT_WEB_UI
      value: "4567"

migrations:
  image:
    repository: migrate/migrate
    tag: v4.4.0
    pullPolicy: IfNotPresent
  path: /migrations

pubsub:
  nameOverride: pubsub
  image:
    repository: vardius/pubsub
    tag: 1.0.5
    pullPolicy: IfNotPresent
  service:
    ports:
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  envFromSecretRef: go-api-boilerplate-app
  env:
    - name: HOST
      valueFrom:
        configMapKeyRef:
          key: HOST
          name: go-api-boilerplate-app
    - name: PORT
      valueFrom:
        configMapKeyRef:
          key: PORT_GRPC
          name: go-api-boilerplate-app
    - name: QUEUE_BUFFER_SIZE
      value: '100'
    - name: LOG_VERBOSE_LEVEL
      value: '4'
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    exec:
      command: ["/bin/grpc_health_probe", "-addr=:3001"]
  liveness:
    initialDelaySeconds: 20
    exec:
      command: ["/bin/grpc_health_probe", "-addr=:3001"]

auth:
  nameOverride: auth
  image:
    repository: auth
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  envFromSecretRef: go-api-boilerplate-app
  env:
    - name: ENV
      valueFrom:
        configMapKeyRef:
          key: ENV
          name: go-api-boilerplate-app
    - name: ORIGINS
      valueFrom:
        configMapKeyRef:
          key: ORIGINS
          name: go-api-boilerplate-app
    - name: HOST
      valueFrom:
        configMapKeyRef:
          key: HOST
          name: go-api-boilerplate-app
    - name: PORT_HTTP
      valueFrom:
        configMapKeyRef:
          key: PORT_HTTP
          name: go-api-boilerplate-app
    - name: PORT_GRPC
      valueFrom:
        configMapKeyRef:
          key: PORT_GRPC
          name: go-api-boilerplate-app
    - name: PUBSUB_HOST
      value: 'go-api-boilerplate-pubsub'
    - name: DB_HOST
      value: 'go-api-boilerplate-mysql'
    - name: DB_PORT
      value: '3306'
    - name: DB_USER
      value: 'root'
    - name: DB_PASS
      valueFrom:
        secretKeyRef:
          key: mysql-root-password
          name: go-api-boilerplate-app
    - name: DB_NAME
      value: 'goapiboilerplate'
    - name: COMMAND_BUS_BUFFER
      value: '100'
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    httpGet:
      path: /readiness
      port: 3000
  liveness:
    initialDelaySeconds: 20
    httpGet:
      path: /healthz
      port: 3000

user:
  nameOverride: user
  image:
    repository: user
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  envFromSecretRef: go-api-boilerplate-app
  env:
    - name: ENV
      valueFrom:
        configMapKeyRef:
          key: ENV
          name: go-api-boilerplate-app
    - name: ORIGINS
      valueFrom:
        configMapKeyRef:
          key: ORIGINS
          name: go-api-boilerplate-app
    - name: HOST
      valueFrom:
        configMapKeyRef:
          key: HOST
          name: go-api-boilerplate-app
    - name: PORT_HTTP
      valueFrom:
        configMapKeyRef:
          key: PORT_HTTP
          name: go-api-boilerplate-app
    - name: PORT_GRPC
      valueFrom:
        configMapKeyRef:
          key: PORT_GRPC
          name: go-api-boilerplate-app
    - name: AUTH_HOST
      value: 'go-api-boilerplate-auth'
    - name: PUBSUB_HOST
      value: 'go-api-boilerplate-pubsub'
    - name: DB_HOST
      value: 'go-api-boilerplate-mysql'
    - name: DB_PORT
      value: '3306'
    - name: DB_USER
      value: 'root'
    - name: DB_PASS
      valueFrom:
        secretKeyRef:
          key: mysql-root-password
          name: go-api-boilerplate-app
    - name: CLIENT_ID
      valueFrom:
        secretKeyRef:
          key: USER_CLIENT_ID
          name: go-api-boilerplate-app
    - name: CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          key: USER_CLIENT_SECRET
          name: go-api-boilerplate-app
    - name: DB_NAME
      value: 'goapiboilerplate'
    - name: AWS_REGION
      valueFrom:
        configMapKeyRef:
          key: AWS_REGION
          name: go-api-boilerplate-app
    - name: AWS_ENDPOINT
      valueFrom:
        configMapKeyRef:
          key: AWS_ENDPOINT
          name: go-api-boilerplate-app
    - name: COMMAND_BUS_BUFFER
      value: '100'
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    httpGet:
      path: /readiness
      port: 3000
  liveness:
    initialDelaySeconds: 20
    httpGet:
      path: /healthz
      port: 3000

secret:
  type: Opaque
  data:
    SECRET: Y2hhbmdlbWU= # changeme
    USER_CLIENT_ID: MDc5ODE3M2UtNjE0Yy00Zjc4LTk5NmItZTllNjNlMDFlZDIw # 0798173e-614c-4f78-996b-e9e63e01ed20
    USER_CLIENT_SECRET: MDc5ODE3M2UtNjE0Yy00Zjc4LTk5NmItZTllNjNlMDFlZDIw # 0798173e-614c-4f78-996b-e9e63e01ed20
    mysql-password: cGFzc3dvcmQ= # password
    mysql-root-password: cGFzc3dvcmQ= # password

configMap:
  data:
    ENV: development
    ORIGINS: go-api-boilerplate.local|localhost|0.0.0.0|127.0.0.1
    HOST: '0.0.0.0'
    PORT_HTTP: '3000'
    PORT_GRPC: '3001'
    AWS_REGION: 'us-east-1'
    AWS_ENDPOINT: 'http://go-api-boilerplate-localstack:4569'
