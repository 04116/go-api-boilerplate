magic-namespace:
  # Uncomment and set to override the namespace that will be created.
  # namespace: go-api-boilerplate
  namespaceAttributes:
    labels:
      certmanager.k8s.io/disable-validation: true
  ## Optional additional ServiceAccounts
  serviceAccounts:
    - goapiboilerplate
    # Optional additional RoleBindings. It is a good idea to specify at least one
    # to grant administrative permissions to a user or group.
  roleBindings:
    - name: admin-group-admin
      role:
        ## Valid values are "Role" or "ClusterRole"
        kind: ClusterRole
        name: admin
      subject:
        ## Valid values are "User", "Group", or "ServiceAccount"
        kind: Group
        name: <group>

ingress:
  issuerName: letsencrypt
  issuerKind: Issuer
  class: nginx
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^(/dashboard)$ $1/ permanent;
  hosts:
    - host: go-api-boilerplate.local
      paths:
        - path: /dashboard(/|$)(.*)
          backend:
            serviceName: kubernetes-dashboard
            servicePort: 443
        # - path: /localstack(/|$)(.*)
        #   backend:
        #     serviceName: go-api-boilerplate-localstack
        #     servicePort: 4567
        - path: /phpmyadmin(/|$)(.*)
          backend:
            serviceName: go-api-boilerplate-phpmyadmin
            servicePort: 443
        - path: /auth(/|$)(.*)
          backend:
            serviceName: go-api-boilerplate-auth
            servicePort: 3000
        - path: /users(/|$)(.*)
          backend:
            serviceName: go-api-boilerplate-user
            servicePort: 3000
  tls:
    - secretName: go-api-boilerplate-tls
      hosts:
        - go-api-boilerplate.local

kubernetes-dashboard:
  enableInsecureLogin: true
  fullnameOverride: 'kubernetes-dashboard'
  extraArgs:
    - '--heapster-host=http://heapster.default:8082'

heapster:
  fullnameOverride: 'heapster'

cert-manager:
  ingressShim:
    defaultIssuerName: letsencrypt
    defaultIssuerKind: Issuer
  # Override the namespace used to store DNS provider credentials etc. for ClusterIssuer
  # resources. By default, the same namespace as cert-manager is deployed within is
  # used. This namespace will not be automatically created by the Helm chart.
  # clusterResourceNamespace: go-api-boilerplate
  # extraArgs:
    # Use this flag to set a namespace that cert-manager will use to store
    # supporting resources required for each ClusterIssuer (default is kube-system)
    # - --cluster-resource-namespace=go-api-boilerplate

issuer:
  name: letsencrypt
  kind: Issuer
  server: https://acme-v02.api.letsencrypt.org/directory
  email: example@example.com
  secretName: go-api-boilerplate-tls
  http01: true

phpmyadmin:
  service:
    port: 443
  db:
    port: 3306
    host: go-api-boilerplate-mysql

mysql:
  existingSecret: mysql-secret
  mysqlUser: goapiboilerplate
  initializationFiles:
    privileges.sql: |-
      GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
      GRANT ALL PRIVILEGES ON *.* TO 'user'@'%' WITH GRANT OPTION;
      FLUSH PRIVILEGES;
    base_schema.sql: |-
      CREATE DATABASE IF NOT EXISTS goapiboilerplate DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;

# AWS localstack https://github.com/localstack/localstack
localstack:
  enabled: false
#   nameOverride: localstack
#   image:
#     repository: localstack/localstack
#     tag: 0.8.10
#     pullPolicy: IfNotPresent
#   service:
#     ports:
#       - name: dynamodb
#         internalPort: 4569
#         externalPort: 4569
#       - name: ui
#         internalPort: 4567
#         externalPort: 4567
#   env:
#     - name: SERVICES
#       value: "dynamodb:4569"
#     - name: PORT_WEB_UI
#       value: "4567"

pubsub:
  nameOverride: pubsub
  serviceAccountName: goapiboilerplate
  image:
    repository: vardius/pubsub
    tag: 1.0.6
    pullPolicy: IfNotPresent
  service:
    ports:
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  envFromConfigMapRefs:
    - pubsub-config
  env:
    - name: HOST
      valueFrom:
        configMapKeyRef:
          key: HOST
          name: global-config
    - name: PORT
      valueFrom:
        configMapKeyRef:
          key: PORT_GRPC
          name: global-config
    - name: QUEUE_BUFFER_SIZE
      value: '100'
    - name: LOG_VERBOSE_LEVEL
      value: '4'
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    exec:
      command: ["/bin/grpc_health_probe", "-addr=:3001"]
  liveness:
    initialDelaySeconds: 20
    exec:
      command: ["/bin/grpc_health_probe", "-addr=:3001"]

auth:
  nameOverride: auth
  serviceAccountName: goapiboilerplate
  image:
    repository: auth
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  initContainers:
    - name: migrations
      image:
        repository: migrate
        tag: latest
        pullPolicy: IfNotPresent
      command:
        - '/migrate'
      args:
        - '-source'
        - 'file:///migrations/auth'
        - '-database'
        - 'mysql://root:password@tcp(go-api-boilerplate-mysql:3306)/goapiboilerplate?multiStatements=true' # @TODO: think of a better way of passing user:password data
        - 'up'
  envFromSecretRefs:
    - global-secret
    - user-secret
  envFromConfigMapRefs:
    - global-config
    - auth-config
    - mysql-config
    - pubsub-config
    # - aws-config
  env:
    - name: DB_PASS
      valueFrom:
        secretKeyRef:
          key: mysql-root-password
          name: mysql-secret
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    httpGet:
      path: /readiness
      port: 3000
  liveness:
    initialDelaySeconds: 20
    httpGet:
      path: /healthz
      port: 3000

user:
  nameOverride: user
  serviceAccountName: goapiboilerplate
  image:
    repository: user
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  initContainers:
    - name: migrations
      image:
        repository: migrate
        tag: latest
        pullPolicy: IfNotPresent
      command:
        - '/migrate'
      args:
        - '-source'
        - 'file:///migrations/user'
        - '-database'
        - 'mysql://root:password@tcp(go-api-boilerplate-mysql:3306)/goapiboilerplate?multiStatements=true' # @TODO: think of a better way of passing user:password data
        - 'up'
  envFromSecretRefs:
    - global-secret
    - user-secret
  envFromConfigMapRefs:
    - global-config
    - user-config
    - mysql-config
    - auth-config
    - pubsub-config
    # - aws-config
  env:
    - name: DB_PASS
      valueFrom:
        secretKeyRef:
          key: mysql-root-password
          name: mysql-secret
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    httpGet:
      path: /readiness
      port: 3000
  liveness:
    initialDelaySeconds: 20
    httpGet:
      path: /healthz
      port: 3000

secrets:
  - name: global-secret
    type: Opaque
    data:
      SECRET: Y2hhbmdlbWU= # changeme
  - name: mysql-secret
    type: Opaque
    data:
      mysql-password: cGFzc3dvcmQ= # password
      mysql-root-password: cGFzc3dvcmQ= # password
  - name: user-secret
    type: Opaque
    data:
      USER_CLIENT_ID: MDc5ODE3M2UtNjE0Yy00Zjc4LTk5NmItZTllNjNlMDFlZDIw # 0798173e-614c-4f78-996b-e9e63e01ed20
      USER_CLIENT_SECRET: MDc5ODE3M2UtNjE0Yy00Zjc4LTk5NmItZTllNjNlMDFlZDIw # 0798173e-614c-4f78-996b-e9e63e01ed20

configMaps:
  - name: global-config
    data:
      ENV: development
      ORIGINS: go-api-boilerplate.local|localhost|0.0.0.0|127.0.0.1
      HOST: '0.0.0.0'
      PORT_HTTP: '3000'
      PORT_GRPC: '3001'
  - name: mysql-config
    data:
      DB_HOST: 'go-api-boilerplate-mysql'
      DB_PORT: '3306'
      DB_NAME: 'goapiboilerplate'
      DB_USER: 'root'
  - name: pubsub-config
    data:
      PUBSUB_HOST: 'go-api-boilerplate-pubsub'
      QUEUE_BUFFER_SIZE: '100'
      KEEPALIVE_MIN_TIME: '5m' # if a client pings more than once every 5 minutes (default), terminate the connection
      KEEPALIVE_TIME: '2h'     # ping the client if it is idle for 2 hours (default) to ensure the connection is still active
      KEEPALIVE_TIMEOUT: '20s' # wait 20 second (default) for the ping ack before assuming the connection is dead
      LOG_VERBOSE_LEVEL: '3'
  - name: auth-config
    data:
      AUTH_HOST: 'go-api-boilerplate-auth'
      AUTH_COMMAND_BUS_BUFFER: '100'
      AUTH_GRPC_SERVER_MIN_TIME: '5m'    # if a client pings more than once every 5 minutes (default), terminate the connection
      AUTH_GRPC_SERVER_TIME: '2h'        # ping the client if it is idle for 2 hours (default) to ensure the connection is still active
      AUTH_GRPC_SERVER_TIMEOUT: '20s'    # wait 20 second (default) for the ping ack before assuming the connection is dead
      AUTH_GRPC_CLIENT_TIME: '10s'       # send pings every 10 seconds if there is no activity
      AUTH_GRPC_CLIENT_TIMEOUT: '20s'    # wait 20 second for ping ack before considering the connection dead
      AUTH_MYSQL_CONN_MAX_LIFETIME: '5m' #  sets the maximum amount of time a connection may be reused
      AUTH_MYSQL_MAX_IDLE_CONNS: '0'     # sets the maximum number of connections in the idle
      AUTH_MYSQL_MAX_OPEN_CONNS: '5'     # sets the maximum number of connections in the idle
  - name: user-config
    data:
      USER_HOST: 'go-api-boilerplate-user'
      USER_COMMAND_BUS_BUFFER: '100'
      USER_GRPC_SERVER_MIN_TIME: '5m'    # if a client pings more than once every 5 minutes (default), terminate the connection
      USER_GRPC_SERVER_TIME: '2h'        # ping the client if it is idle for 2 hours (default) to ensure the connection is still active
      USER_GRPC_SERVER_TIMEOUT: '20s'    # wait 20 second (default) for the ping ack before assuming the connection is dead
      USER_GRPC_CLIENT_TIME: '10s'       # send pings every 10 seconds if there is no activity
      USER_GRPC_CLIENT_TIMEOUT: '20s'    # wait 20 second for ping ack before considering the connection dead
      USER_MYSQL_CONN_MAX_LIFETIME: '5m' #  sets the maximum amount of time a connection may be reused
      USER_MYSQL_MAX_IDLE_CONNS: '0'     # sets the maximum number of connections in the idle
      USER_MYSQL_MAX_OPEN_CONNS: '5'     # sets the maximum number of connections in the idle
  # - name: aws-config
  #   data:
      # AWS_REGION: 'us-east-1'
      # AWS_ENDPOINT: 'http://go-api-boilerplate-localstack:4569'
