// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package domain is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Command
	Response
*/
package domain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Command is passed when dispatching
type Command struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Response is empty.
type Response struct {
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Command)(nil), "domain.Command")
	proto.RegisterType((*Response)(nil), "domain.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Domain service

type DomainClient interface {
	Dispatch(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
}

type domainClient struct {
	cc *grpc.ClientConn
}

func NewDomainClient(cc *grpc.ClientConn) DomainClient {
	return &domainClient{cc}
}

func (c *domainClient) Dispatch(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/domain.Domain/Dispatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Domain service

type DomainServer interface {
	Dispatch(context.Context, *Command) (*Response, error)
}

func RegisterDomainServer(s *grpc.Server, srv DomainServer) {
	s.RegisterService(&_Domain_serviceDesc, srv)
}

func _Domain_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Domain/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Dispatch(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _Domain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.Domain",
	HandlerType: (*DomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _Domain_Dispatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xc9, 0xcf, 0x4d, 0xcc,
	0xcc, 0x53, 0x32, 0xe7, 0x62, 0x77, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x11, 0x12, 0xe2, 0x62,
	0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x24, 0xb8,
	0xd8, 0x0b, 0x12, 0x2b, 0x73, 0xf2, 0x13, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0x60,
	0x5c, 0x25, 0x2e, 0x2e, 0x8e, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x23, 0x73, 0x2e,
	0x36, 0x17, 0xb0, 0x71, 0x42, 0xba, 0x5c, 0x1c, 0x2e, 0x99, 0xc5, 0x05, 0x89, 0x25, 0xc9, 0x19,
	0x42, 0xfc, 0x7a, 0x10, 0x3b, 0xf4, 0xa0, 0x16, 0x48, 0x09, 0xc0, 0x04, 0x60, 0x1a, 0x9d, 0xe4,
	0xb9, 0xf8, 0x32, 0xf3, 0xf5, 0xd2, 0x8b, 0x0a, 0x92, 0xa1, 0x52, 0x4e, 0xdc, 0x10, 0x83, 0x02,
	0x40, 0x8e, 0x0c, 0x60, 0x4c, 0x62, 0x03, 0xbb, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x77,
	0xe0, 0xb7, 0xd4, 0xbe, 0x00, 0x00, 0x00,
}
